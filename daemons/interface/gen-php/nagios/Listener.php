<?php
namespace Thrift\Nagios;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/nagios/nagios_types.php';

interface ListenerIf {
  public function processEvent($ev);
}

class ListenerClient implements \Thrift\Nagios\ListenerIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function processEvent($ev)
  {
    $this->send_processEvent($ev);
  }

  public function send_processEvent($ev)
  {
    $args = new \Thrift\Nagios\Listener_processEvent_args();
    $args->ev = $ev;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'processEvent', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('processEvent', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class Listener_processEvent_args extends \TBase {
  static $_TSPEC;

  public $ev = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ev',
          'name' => '\Thrift\Nagios\Event',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\Nagios\Event',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Listener_processEvent_args';
  }

  public function read($input)
  {
    return $this->_read('Listener_processEvent_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Listener_processEvent_args', self::$_TSPEC, $output);
  }
}

class ListenerProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(\TType::STRUCT);
      $input->readMessageEnd();
      $x = new \TApplicationException('Function '.$fname.' not implemented.', \TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, \TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_processEvent($seqid, $input, $output) {
    $args = new \Thrift\Nagios\Listener_processEvent_args();
    $args->read($input);
    $input->readMessageEnd();
    $this->handler_->processEvent($args->ev);
    return;
  }
}
?>
