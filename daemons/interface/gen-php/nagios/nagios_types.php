<?php
namespace Thrift\Nagios;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/common/common_types.php';

$GLOBALS['\Thrift\Nagios\E_CheckService'] = array(
  'ping' => 1,
  'ssh' => 2,
  'http' => 3,
  'telnet' => 4,
);

final class CheckService {
  const ping = 1;
  const ssh = 2;
  const http = 3;
  const telnet = 4;
  static public $__names = array(
    1 => 'ping',
    2 => 'ssh',
    3 => 'http',
    4 => 'telnet',
  );
}

class HostEntry extends \TBase {
  static $_TSPEC;

  public $hostName = null;
  public $hostAlias = null;
  public $ip = null;
  public $contactGroup = null;
  public $template = "generic-host";
  public $image = null;
  public $coords = null;
  public $url = null;
  public $groups = array(
    "default",
  );
  public $services = array(
        1,
  );
  public $parents = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hostName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'hostAlias',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        4 => array(
          'var' => 'contactGroup',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        5 => array(
          'var' => 'template',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        6 => array(
          'var' => 'image',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        7 => array(
          'var' => 'coords',
          'name' => '\Thrift\coordinates',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\coordinates',
          ),
        8 => array(
          'var' => 'url',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        9 => array(
          'var' => 'groups',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRING,
          'elem' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'services',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::ENUM,
          'elem' => array(
            'name' => '\Thrift\Nagios\CheckService',
            'type' => \TType::ENUM,
            'enum' => '\Thrift\Nagios\E_CheckService',
            ),
          ),
        11 => array(
          'var' => 'parents',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRING,
          'elem' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'HostEntry';
  }

  public function read($input)
  {
    return $this->_read('HostEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('HostEntry', self::$_TSPEC, $output);
  }
}

class Configuration extends \TBase {
  static $_TSPEC;

  public $hosts = null;
  public $groupAliases = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hosts',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\Nagios\HostEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\Nagios\HostEntry',
            ),
          ),
        2 => array(
          'var' => 'groupAliases',
          'name' => '',
          'type' => \TType::MAP,
          'ktype' => \TType::STRING,
          'vtype' => \TType::STRING,
          'key' => array(
            'name' => 'string',
            'type' => \TType::STRING,
          ),
          'val' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Configuration';
  }

  public function read($input)
  {
    return $this->_read('Configuration', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Configuration', self::$_TSPEC, $output);
  }
}

class Event extends \TBase {
  static $_TSPEC;

  public $hostName = null;
  public $hostIp = null;
  public $newState = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hostName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'hostIp',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'newState',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Event';
  }

  public function read($input)
  {
    return $this->_read('Event', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Event', self::$_TSPEC, $output);
  }
}

?>
