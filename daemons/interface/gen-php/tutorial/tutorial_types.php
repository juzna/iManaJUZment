<?php
namespace Thrift\tutorial;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/shared/shared_types.php';

$GLOBALS['\Thrift\tutorial\E_Operation'] = array(
  'ADD' => 1,
  'SUBTRACT' => 2,
  'MULTIPLY' => 3,
  'DIVIDE' => 4,
);

final class Operation {
  const ADD = 1;
  const SUBTRACT = 2;
  const MULTIPLY = 3;
  const DIVIDE = 4;
  static public $__names = array(
    1 => 'ADD',
    2 => 'SUBTRACT',
    3 => 'MULTIPLY',
    4 => 'DIVIDE',
  );
}

class Work extends \TBase {
  static $_TSPEC;

  public $num1 = 0;
  public $num2 = null;
  public $op = null;
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'num1',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'num2',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        3 => array(
          'var' => 'op',
          'name' => '\Thrift\tutorial\Operation',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\tutorial\E_Operation',
          ),
        4 => array(
          'var' => 'comment',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Work';
  }

  public function read($input)
  {
    return $this->_read('Work', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Work', self::$_TSPEC, $output);
  }
}

class InvalidOperation extends \TException {
  static $_TSPEC;

  public $what = null;
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'what',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'why',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'InvalidOperation';
  }

  public function read($input)
  {
    return $this->_read('InvalidOperation', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('InvalidOperation', self::$_TSPEC, $output);
  }
}

?>
