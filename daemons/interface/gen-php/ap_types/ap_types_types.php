<?php
namespace Thrift\APos;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/common/common_types.php';

$GLOBALS['\Thrift\APos\E_MacAddressEntryState'] = array(
  'unknown' => 0,
  'learned' => 1,
  'configured' => 2,
  'other' => 255,
);

final class MacAddressEntryState {
  const unknown = 0;
  const learned = 1;
  const configured = 2;
  const other = 255;
  static public $__names = array(
    0 => 'unknown',
    1 => 'learned',
    2 => 'configured',
    255 => 'other',
  );
}

$GLOBALS['\Thrift\APos\E_LinkType'] = array(
  'access' => 1,
  'trunk' => 2,
  'hybrid' => 3,
);

final class LinkType {
  const access = 1;
  const trunk = 2;
  const hybrid = 3;
  static public $__names = array(
    1 => 'access',
    2 => 'trunk',
    3 => 'hybrid',
  );
}

$GLOBALS['\Thrift\APos\E_NetIfType'] = array(
  'other' => 0,
  'ether' => 1,
  'wlan' => 2,
  'vlan' => 3,
  'eoip' => 4,
  'ppp' => 5,
);

final class NetIfType {
  const other = 0;
  const ether = 1;
  const wlan = 2;
  const vlan = 3;
  const eoip = 4;
  const ppp = 5;
  static public $__names = array(
    0 => 'other',
    1 => 'ether',
    2 => 'wlan',
    3 => 'vlan',
    4 => 'eoip',
    5 => 'ppp',
  );
}

$GLOBALS['\Thrift\APos\E_WirelessBand'] = array(
  'other' => 0,
  'b24' => 1,
  'b5' => 2,
  'b3' => 3,
);

final class WirelessBand {
  const other = 0;
  const b24 = 1;
  const b5 = 2;
  const b3 = 3;
  static public $__names = array(
    0 => 'other',
    1 => 'b24',
    2 => 'b5',
    3 => 'b3',
  );
}

$GLOBALS['\Thrift\APos\E_WifiEncryptionType'] = array(
  'none' => 0,
  'wep' => 1,
  'wpa' => 2,
  'unknown' => 255,
);

final class WifiEncryptionType {
  const none = 0;
  const wep = 1;
  const wpa = 2;
  const unknown = 255;
  static public $__names = array(
    0 => 'none',
    1 => 'wep',
    2 => 'wpa',
    255 => 'unknown',
  );
}

class MacAddressEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $mac = null;
  public $ifName = null;
  public $vlan = null;
  public $state = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'mac',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        4 => array(
          'var' => 'vlan',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        5 => array(
          'var' => 'state',
          'name' => '\Thrift\APos\MacAddressEntryState',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\APos\E_MacAddressEntryState',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'MacAddressEntry';
  }

  public function read($input)
  {
    return $this->_read('MacAddressEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('MacAddressEntry', self::$_TSPEC, $output);
  }
}

class ArpEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $ip = null;
  public $mac = null;
  public $vlan = null;
  public $ifName = null;
  public $isStatic = null;
  public $isActive = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'ip',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'mac',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        4 => array(
          'var' => 'vlan',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        5 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        6 => array(
          'var' => 'isStatic',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        7 => array(
          'var' => 'isActive',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ArpEntry';
  }

  public function read($input)
  {
    return $this->_read('ArpEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ArpEntry', self::$_TSPEC, $output);
  }
}

class VlanEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $vlan = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'vlan',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        3 => array(
          'var' => 'description',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VlanEntry';
  }

  public function read($input)
  {
    return $this->_read('VlanEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('VlanEntry', self::$_TSPEC, $output);
  }
}

class VlanPortEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $vlan = null;
  public $port = null;
  public $linkType = null;
  public $isTagged = null;
  public $isPvid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'vlan',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        3 => array(
          'var' => 'port',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        4 => array(
          'var' => 'linkType',
          'name' => '\Thrift\APos\LinkType',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\APos\E_LinkType',
          ),
        5 => array(
          'var' => 'isTagged',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        6 => array(
          'var' => 'isPvid',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VlanPortEntry';
  }

  public function read($input)
  {
    return $this->_read('VlanPortEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('VlanPortEntry', self::$_TSPEC, $output);
  }
}

class RouteEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $destination = null;
  public $netmask = null;
  public $gateway = null;
  public $preference = null;
  public $cost = null;
  public $mac = null;
  public $ifName = null;
  public $isStatic = null;
  public $isActive = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'destination',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'netmask',
          'name' => 'byte',
          'type' => \TType::BYTE,
          ),
        4 => array(
          'var' => 'gateway',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        5 => array(
          'var' => 'preference',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        6 => array(
          'var' => 'cost',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        7 => array(
          'var' => 'mac',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        8 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        9 => array(
          'var' => 'isStatic',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        10 => array(
          'var' => 'isActive',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'RouteEntry';
  }

  public function read($input)
  {
    return $this->_read('RouteEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('RouteEntry', self::$_TSPEC, $output);
  }
}

class IpAddressEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $ip = null;
  public $netmask = null;
  public $ifName = null;
  public $isEnabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'ip',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'netmask',
          'name' => 'byte',
          'type' => \TType::BYTE,
          ),
        4 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        5 => array(
          'var' => 'isEnabled',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'IpAddressEntry';
  }

  public function read($input)
  {
    return $this->_read('IpAddressEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('IpAddressEntry', self::$_TSPEC, $output);
  }
}

class WifiEncryptionInfo extends \TBase {
  static $_TSPEC;

  public $type = null;
  public $passphrase = null;
  public $keys = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'name' => '\Thrift\APos\WifiEncryptionType',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\APos\E_WifiEncryptionType',
          ),
        2 => array(
          'var' => 'passphrase',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'keys',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRING,
          'elem' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'WifiEncryptionInfo';
  }

  public function read($input)
  {
    return $this->_read('WifiEncryptionInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('WifiEncryptionInfo', self::$_TSPEC, $output);
  }
}

class WirelessIfInfo extends \TBase {
  static $_TSPEC;

  public $bssid = null;
  public $essid = null;
  public $band = null;
  public $frequency = null;
  public $encryption = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bssid',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'essid',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'band',
          'name' => '\Thrift\APos\WirelessBand',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\APos\E_WirelessBand',
          ),
        4 => array(
          'var' => 'frequency',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        5 => array(
          'var' => 'encryption',
          'name' => '\Thrift\APos\WifiEncryptionInfo',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\APos\WifiEncryptionInfo',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'WirelessIfInfo';
  }

  public function read($input)
  {
    return $this->_read('WirelessIfInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('WirelessIfInfo', self::$_TSPEC, $output);
  }
}

class VlanIfInfo extends \TBase {
  static $_TSPEC;

  public $vlan = null;
  public $isTagged = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vlan',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        2 => array(
          'var' => 'isTagged',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VlanIfInfo';
  }

  public function read($input)
  {
    return $this->_read('VlanIfInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('VlanIfInfo', self::$_TSPEC, $output);
  }
}

class NetInterfaceEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $ifName = null;
  public $type = null;
  public $mtu = null;
  public $wireless = null;
  public $vlan = null;
  public $isEnabled = null;
  public $isActive = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'name' => '\Thrift\APos\NetIfType',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\APos\E_NetIfType',
          ),
        4 => array(
          'var' => 'mtu',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        5 => array(
          'var' => 'wireless',
          'name' => '\Thrift\APos\WirelessIfInfo',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\APos\WirelessIfInfo',
          ),
        6 => array(
          'var' => 'vlan',
          'name' => '\Thrift\APos\VlanIfInfo',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\APos\VlanIfInfo',
          ),
        7 => array(
          'var' => 'isEnabled',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        8 => array(
          'var' => 'isActive',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NetInterfaceEntry';
  }

  public function read($input)
  {
    return $this->_read('NetInterfaceEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NetInterfaceEntry', self::$_TSPEC, $output);
  }
}

class PortEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $port = null;
  public $linkType = null;
  public $isEnabled = null;
  public $isActive = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'port',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'linkType',
          'name' => '\Thrift\APos\LinkType',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\APos\E_LinkType',
          ),
        4 => array(
          'var' => 'isEnabled',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        5 => array(
          'var' => 'isActive',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        6 => array(
          'var' => 'description',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'PortEntry';
  }

  public function read($input)
  {
    return $this->_read('PortEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('PortEntry', self::$_TSPEC, $output);
  }
}

class RegistrationTableEntry extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $ifName = null;
  public $mac = null;
  public $radioName = null;
  public $uptime = null;
  public $snr = null;
  public $lastIP = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'mac',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        4 => array(
          'var' => 'radioName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        5 => array(
          'var' => 'uptime',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        6 => array(
          'var' => 'snr',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        7 => array(
          'var' => 'lastIP',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'RegistrationTableEntry';
  }

  public function read($input)
  {
    return $this->_read('RegistrationTableEntry', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('RegistrationTableEntry', self::$_TSPEC, $output);
  }
}

class OSInfo extends \TBase {
  static $_TSPEC;

  public $ap = null;
  public $name = null;
  public $vMajor = null;
  public $vMinor = null;
  public $version = null;
  public $uptime = null;
  public $ip = null;
  public $moreInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ap',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'vMajor',
          'name' => 'byte',
          'type' => \TType::BYTE,
          ),
        4 => array(
          'var' => 'vMinor',
          'name' => 'byte',
          'type' => \TType::BYTE,
          ),
        5 => array(
          'var' => 'version',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        6 => array(
          'var' => 'uptime',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        7 => array(
          'var' => 'ip',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        255 => array(
          'var' => 'moreInfo',
          'name' => '',
          'type' => \TType::MAP,
          'ktype' => \TType::STRING,
          'vtype' => \TType::STRING,
          'key' => array(
            'name' => 'string',
            'type' => \TType::STRING,
          ),
          'val' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OSInfo';
  }

  public function read($input)
  {
    return $this->_read('OSInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OSInfo', self::$_TSPEC, $output);
  }
}

?>
