<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
//include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

//include_once $GLOBALS['THRIFT_ROOT'].'/packages/liveconnect/liveconnect_types.php';

interface LiveConnectIf {
  public function notify($user, $table, $op, $oldData, $nwData);
  public function subscribe($clientKey, $ev, $timeout);
  public function unsubscribe($clientKey, $ev);
  public function unsubscribeClient($clientKey);
  public function getSubscriptions();
  public function getClients();
}

class LiveConnectClient implements LiveConnectIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function notify($user, $table, $op, $oldData, $nwData)
  {
    $this->send_notify($user, $table, $op, $oldData, $nwData);
  }

  public function send_notify($user, $table, $op, $oldData, $nwData)
  {
    $args = new LiveConnect_LiveConnect_notify_args();
    $args->user = $user;
    $args->table = $table;
    $args->op = $op;
    $args->oldData = $oldData;
    $args->nwData = $nwData;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function subscribe($clientKey, $ev, $timeout)
  {
    $this->send_subscribe($clientKey, $ev, $timeout);
    return $this->recv_subscribe();
  }

  public function send_subscribe($clientKey, $ev, $timeout)
  {
    $args = new LiveConnect_LiveConnect_subscribe_args();
    $args->clientKey = $clientKey;
    $args->ev = $ev;
    $args->timeout = $timeout;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'subscribe', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('subscribe', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_subscribe()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'LiveConnect_LiveConnect_subscribe_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new LiveConnect_LiveConnect_subscribe_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("subscribe failed: unknown result");
  }

  public function unsubscribe($clientKey, $ev)
  {
    $this->send_unsubscribe($clientKey, $ev);
    return $this->recv_unsubscribe();
  }

  public function send_unsubscribe($clientKey, $ev)
  {
    $args = new LiveConnect_LiveConnect_unsubscribe_args();
    $args->clientKey = $clientKey;
    $args->ev = $ev;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unsubscribe', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unsubscribe', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unsubscribe()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'LiveConnect_LiveConnect_unsubscribe_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new LiveConnect_LiveConnect_unsubscribe_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("unsubscribe failed: unknown result");
  }

  public function unsubscribeClient($clientKey)
  {
    $this->send_unsubscribeClient($clientKey);
    return $this->recv_unsubscribeClient();
  }

  public function send_unsubscribeClient($clientKey)
  {
    $args = new LiveConnect_LiveConnect_unsubscribeClient_args();
    $args->clientKey = $clientKey;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unsubscribeClient', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unsubscribeClient', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unsubscribeClient()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'LiveConnect_LiveConnect_unsubscribeClient_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new LiveConnect_LiveConnect_unsubscribeClient_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("unsubscribeClient failed: unknown result");
  }

  public function getSubscriptions()
  {
    $this->send_getSubscriptions();
    return $this->recv_getSubscriptions();
  }

  public function send_getSubscriptions()
  {
    $args = new LiveConnect_LiveConnect_getSubscriptions_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSubscriptions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSubscriptions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSubscriptions()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'LiveConnect_LiveConnect_getSubscriptions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new LiveConnect_LiveConnect_getSubscriptions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSubscriptions failed: unknown result");
  }

  public function getClients()
  {
    $this->send_getClients();
    return $this->recv_getClients();
  }

  public function send_getClients()
  {
    $args = new LiveConnect_LiveConnect_getClients_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getClients', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getClients', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getClients()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'LiveConnect_LiveConnect_getClients_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new LiveConnect_LiveConnect_getClients_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getClients failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class LiveConnect_LiveConnect_notify_args extends TBase {
  static $_TSPEC;

  public $user = null;
  public $table = null;
  public $op = null;
  public $oldData = null;
  public $nwData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'table',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'op',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'oldData',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'nwData',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_notify_args';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_notify_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_notify_args', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_subscribe_args extends TBase {
  static $_TSPEC;

  public $clientKey = null;
  public $ev = null;
  public $timeout = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'clientKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ev',
          'type' => TType::STRUCT,
          'class' => 'LiveConnect_EventDefinition',
          ),
        3 => array(
          'var' => 'timeout',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_subscribe_args';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_subscribe_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_subscribe_args', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_subscribe_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_subscribe_result';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_subscribe_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_subscribe_result', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_unsubscribe_args extends TBase {
  static $_TSPEC;

  public $clientKey = null;
  public $ev = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'clientKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ev',
          'type' => TType::STRUCT,
          'class' => 'LiveConnect_EventDefinition',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_unsubscribe_args';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_unsubscribe_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_unsubscribe_args', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_unsubscribe_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_unsubscribe_result';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_unsubscribe_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_unsubscribe_result', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_unsubscribeClient_args extends TBase {
  static $_TSPEC;

  public $clientKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'clientKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_unsubscribeClient_args';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_unsubscribeClient_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_unsubscribeClient_args', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_unsubscribeClient_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_unsubscribeClient_result';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_unsubscribeClient_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_unsubscribeClient_result', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_getSubscriptions_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'LiveConnect_getSubscriptions_args';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_getSubscriptions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_getSubscriptions_args', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_getSubscriptions_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'LiveConnect_Subscription',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_getSubscriptions_result';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_getSubscriptions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_getSubscriptions_result', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_getClients_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'LiveConnect_getClients_args';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_getClients_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_getClients_args', self::$_TSPEC, $output);
  }
}

class LiveConnect_LiveConnect_getClients_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'LiveConnect_ClientInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LiveConnect_getClients_result';
  }

  public function read($input)
  {
    return $this->_read('LiveConnect_getClients_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LiveConnect_getClients_result', self::$_TSPEC, $output);
  }
}

class LiveConnectProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_notify($seqid, $input, $output) {
    $args = new LiveConnect_LiveConnect_notify_args();
    $args->read($input);
    $input->readMessageEnd();
    $this->handler_->notify($args->user, $args->table, $args->op, $args->oldData, $args->nwData);
    return;
  }
  protected function process_subscribe($seqid, $input, $output) {
    $args = new LiveConnect_LiveConnect_subscribe_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new LiveConnect_LiveConnect_subscribe_result();
    $result->success = $this->handler_->subscribe($args->clientKey, $args->ev, $args->timeout);
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'subscribe', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('subscribe', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_unsubscribe($seqid, $input, $output) {
    $args = new LiveConnect_LiveConnect_unsubscribe_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new LiveConnect_LiveConnect_unsubscribe_result();
    $result->success = $this->handler_->unsubscribe($args->clientKey, $args->ev);
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'unsubscribe', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('unsubscribe', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_unsubscribeClient($seqid, $input, $output) {
    $args = new LiveConnect_LiveConnect_unsubscribeClient_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new LiveConnect_LiveConnect_unsubscribeClient_result();
    $result->success = $this->handler_->unsubscribeClient($args->clientKey);
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'unsubscribeClient', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('unsubscribeClient', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getSubscriptions($seqid, $input, $output) {
    $args = new LiveConnect_LiveConnect_getSubscriptions_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new LiveConnect_LiveConnect_getSubscriptions_result();
    $result->success = $this->handler_->getSubscriptions();
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSubscriptions', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSubscriptions', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getClients($seqid, $input, $output) {
    $args = new LiveConnect_LiveConnect_getClients_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new LiveConnect_LiveConnect_getClients_result();
    $result->success = $this->handler_->getClients();
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getClients', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getClients', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
}
?>
