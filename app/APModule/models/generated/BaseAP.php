<?php

/**
 * BaseAP
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $ID
 * @property integer $APNetwork_ID
 * @property string $name
 * @property string $description
 * @property enum $mode
 * @property string $IP
 * @property integer $netmask
 * @property integer $pvid
 * @property boolean $snmpAllowed
 * @property string $snmpCommunity
 * @property string $snmpPassword
 * @property string $snmpVersion
 * @property string $realm
 * @property string $username
 * @property string $pass
 * @property string $os
 * @property string $osVersion
 * @property string $sshFingerprint
 * @property integer $l3parent
 * @property string $l3parentIf
 * @property APNetwork $network
 * @property Doctrine_Collection $APParams
 * @property Doctrine_Collection $APParent
 * @property Doctrine_Collection $APAntenna
 * @property Doctrine_Collection $APSwIf
 * @property Doctrine_Collection $APHw
 * @property Doctrine_Collection $APIP
 * @property Doctrine_Collection $APPort
 * @property Doctrine_Collection $APPortVlan
 * @property Doctrine_Collection $APPokryti
 * @property Doctrine_Collection $APRoute
 * @property Doctrine_Collection $APService
 * @property Doctrine_Collection $APVlan
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAP extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('AP');
        $this->hasColumn('ID', 'integer', 11, array(
             'primary' => true,
             'unique' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('APNetwork_ID', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'unique' => true,
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('mode', 'enum', null, array(
             'default' => 'other',
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'route',
              1 => 'bridge',
              2 => 'nat',
              3 => 'complex',
              4 => 'other',
             ),
             ));
        $this->hasColumn('IP', 'string', 15, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '15',
             ));
        $this->hasColumn('netmask', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '2',
             ));
        $this->hasColumn('pvid', 'integer', 4, array(
             'default' => 1,
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('snmpAllowed', 'boolean', null, array(
             'default' => false,
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('snmpCommunity', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('snmpPassword', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('snmpVersion', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('realm', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('pass', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('os', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '20',
             ));
        $this->hasColumn('osVersion', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('sshFingerprint', 'string', 60, array(
             'type' => 'string',
             'length' => '60',
             ));
        $this->hasColumn('l3parent', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('l3parentIf', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('APNetwork as network', array(
             'local' => 'APNetwork_ID',
             'foreign' => 'ID'));

        $this->hasMany('APParams', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APParent', array(
             'local' => 'ID',
             'foreign' => 'childAP'));

        $this->hasMany('APAntenna', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APSwIf', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APHw', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APIP', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APPort', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APPortVlan', array(
             'local' => 'id',
             'foreign' => 'a_p_id'));

        $this->hasMany('APPokryti', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APRoute', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APService', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $this->hasMany('APVlan', array(
             'local' => 'ID',
             'foreign' => 'AP'));

        $taggable0 = new Doctrine_Template_Taggable(array(
             'tableName' => 'APGroupTags',
             'tagTableName' => 'APGroupTagList',
             ));
        $geographicalcz0 = new Doctrine_Template_GeographicalCZ(array(
             'postal' => true,
             'uir' => true,
             ));
        $this->actAs($taggable0);
        $this->actAs($geographicalcz0);
    }
}