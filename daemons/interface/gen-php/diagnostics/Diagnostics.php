<?php
namespace Thrift;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/diagnostics/diagnostics_types.php';

interface DiagnosticsIf {
  public function ping($ip, $timeout, $count, $size, $mode);
  public function multiPing($ipList, $timeout, $count, $size, $mode);
  public function traceroute($ip, $timeout, $count, $type);
}

class DiagnosticsClient implements \Thrift\DiagnosticsIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping($ip, $timeout, $count, $size, $mode)
  {
    $this->send_ping($ip, $timeout, $count, $size, $mode);
    return $this->recv_ping();
  }

  public function send_ping($ip, $timeout, $count, $size, $mode)
  {
    $args = new \Thrift\Diagnostics_ping_args();
    $args->ip = $ip;
    $args->timeout = $timeout;
    $args->count = $count;
    $args->size = $size;
    $args->mode = $mode;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Diagnostics_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Diagnostics_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function multiPing($ipList, $timeout, $count, $size, $mode)
  {
    $this->send_multiPing($ipList, $timeout, $count, $size, $mode);
    return $this->recv_multiPing();
  }

  public function send_multiPing($ipList, $timeout, $count, $size, $mode)
  {
    $args = new \Thrift\Diagnostics_multiPing_args();
    $args->ipList = $ipList;
    $args->timeout = $timeout;
    $args->count = $count;
    $args->size = $size;
    $args->mode = $mode;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'multiPing', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('multiPing', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_multiPing()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Diagnostics_multiPing_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Diagnostics_multiPing_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("multiPing failed: unknown result");
  }

  public function traceroute($ip, $timeout, $count, $type)
  {
    $this->send_traceroute($ip, $timeout, $count, $type);
    return $this->recv_traceroute();
  }

  public function send_traceroute($ip, $timeout, $count, $type)
  {
    $args = new \Thrift\Diagnostics_traceroute_args();
    $args->ip = $ip;
    $args->timeout = $timeout;
    $args->count = $count;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'traceroute', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('traceroute', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_traceroute()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Diagnostics_traceroute_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Diagnostics_traceroute_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("traceroute failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Diagnostics_ping_args extends \TBase {
  static $_TSPEC;

  public $ip = null;
  public $timeout = null;
  public $count = 5;
  public $size = 20;
  public $mode =   1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'timeout',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        3 => array(
          'var' => 'count',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        4 => array(
          'var' => 'size',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        5 => array(
          'var' => 'mode',
          'name' => '\Thrift\PingMode',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\E_PingMode',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Diagnostics_ping_args';
  }

  public function read($input)
  {
    return $this->_read('Diagnostics_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Diagnostics_ping_args', self::$_TSPEC, $output);
  }
}

class Diagnostics_ping_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '\Thrift\PingResponse',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\PingResponse',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Diagnostics_ping_result';
  }

  public function read($input)
  {
    return $this->_read('Diagnostics_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Diagnostics_ping_result', self::$_TSPEC, $output);
  }
}

class Diagnostics_multiPing_args extends \TBase {
  static $_TSPEC;

  public $ipList = null;
  public $timeout = null;
  public $count = 5;
  public $size = 20;
  public $mode =   1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ipList',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRING,
          'elem' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timeout',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        3 => array(
          'var' => 'count',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        4 => array(
          'var' => 'size',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        5 => array(
          'var' => 'mode',
          'name' => '\Thrift\PingMode',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\E_PingMode',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Diagnostics_multiPing_args';
  }

  public function read($input)
  {
    return $this->_read('Diagnostics_multiPing_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Diagnostics_multiPing_args', self::$_TSPEC, $output);
  }
}

class Diagnostics_multiPing_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::MAP,
          'ktype' => \TType::STRING,
          'vtype' => \TType::STRUCT,
          'key' => array(
            'name' => 'string',
            'type' => \TType::STRING,
          ),
          'val' => array(
            'name' => '\Thrift\PingResponse',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\PingResponse',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Diagnostics_multiPing_result';
  }

  public function read($input)
  {
    return $this->_read('Diagnostics_multiPing_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Diagnostics_multiPing_result', self::$_TSPEC, $output);
  }
}

class Diagnostics_traceroute_args extends \TBase {
  static $_TSPEC;

  public $ip = null;
  public $timeout = null;
  public $count = 3;
  public $type =   1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'timeout',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        3 => array(
          'var' => 'count',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        4 => array(
          'var' => 'type',
          'name' => '\Thrift\TracerouteMode',
          'type' => \TType::ENUM,
          'enum' => '\Thrift\E_TracerouteMode',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Diagnostics_traceroute_args';
  }

  public function read($input)
  {
    return $this->_read('Diagnostics_traceroute_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Diagnostics_traceroute_args', self::$_TSPEC, $output);
  }
}

class Diagnostics_traceroute_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '\Thrift\TracerouteResponse',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\TracerouteResponse',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Diagnostics_traceroute_result';
  }

  public function read($input)
  {
    return $this->_read('Diagnostics_traceroute_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Diagnostics_traceroute_result', self::$_TSPEC, $output);
  }
}

class DiagnosticsProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(\TType::STRUCT);
      $input->readMessageEnd();
      $x = new \TApplicationException('Function '.$fname.' not implemented.', \TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, \TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_ping($seqid, $input, $output) {
    $args = new \Thrift\Diagnostics_ping_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\Diagnostics_ping_result();
    $result->success = $this->handler_->ping($args->ip, $args->timeout, $args->count, $args->size, $args->mode);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'ping', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('ping', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_multiPing($seqid, $input, $output) {
    $args = new \Thrift\Diagnostics_multiPing_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\Diagnostics_multiPing_result();
    $result->success = $this->handler_->multiPing($args->ipList, $args->timeout, $args->count, $args->size, $args->mode);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'multiPing', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('multiPing', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_traceroute($seqid, $input, $output) {
    $args = new \Thrift\Diagnostics_traceroute_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\Diagnostics_traceroute_result();
    $result->success = $this->handler_->traceroute($args->ip, $args->timeout, $args->count, $args->type);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'traceroute', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('traceroute', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
}
?>
