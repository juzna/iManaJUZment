<?php
/**
 * This file is part of the "iManaJUZment" - complex system for internet service providers
 *
 * Copyright (c) 2005 - 2011 Jan Dolecek (http://juzna.cz)
 *
 * iManaJUZment is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * You should have received a copy of the GNU General Public License
 * along with iManaJUZment.  If not, see <http://www.gnu.org/licenses/gpl.txt>.
 *
 * @license http://www.gnu.org/licenses/gpl.txt
 */


namespace Juz\Tables\Definition;

use Juz\Tables\ITableDefinition,
  Juz\Tables\Field,
  ActiveEntity\Annotations\Link,
  ActiveEntity\Annotations\HeaderLink;


/**
 * Table definition autogenerated from Doctrine entity and it's annotations
 */
class DoctrineDefinition extends \Nette\Object implements ITableDefinition {
  /** @var string */
  private $entityName;

  /** @var \Juz\ClassMetaData */
  private $classMetadata;

  /** @var \ActiveEntity\Metadata */
  private $aeMetadata;

  private $_cache;

  /**
   * @param string $entityName Class of entity to be loaded
   * @param \Juz\ClassMetaData $classMetadata Class metadata, can be omitted
   * @param \ActiveEntity\Metadata $aeMetadata Active entity metadata, can be omitted
   */
  public function __construct($entityName, $classMetadata = null, $aeMetadata = null) {
    $this->entityName = $entityName;
    $this->classMetadata = $classMetadata ?: \ActiveEntity\Entity::getClassMetadata($entityName);
    $this->aeMetadata = $aeMetadata ?: $this->classMetadata->getExtension('ActiveEntity');
  }

  /**
   * Get unique ID of this table
   * @return string
   */
  public function getId() {
    return 'doctrine_' . $this->entityName;
  }
  
  /**
   * Get title of table
   * @return string
   */
  public function getTitle() {
    return $this->aeMetadata->getTitle();
  }

  /**
   * Get list of fields
   * @return array of TableField
   */
  public function getFields() {
    /** @var $field \Juz\Tables\Field */

    $ret = array();
    $cntVisible = 0;

    foreach($this->classMetadata->getAllFieldNames() as $fieldName) {
      // It's simple field
      if($this->classMetadata->hasField($fieldName)) {
        $definition = $this->classMetadata->getFieldMapping($fieldName);
        if($field = $this->createSimpleField($fieldName, $definition)) $ret[$fieldName] = $field;
      }

      // It's association
      elseif($this->classMetadata->hasAssociation($fieldName)) {
        $definition = $this->classMetadata->getAssociationMapping($fieldName);
        if(!$this->aeMetadata->getFieldMetadata($fieldName, 'Show')) continue; // Should not be shown

        if($field = $this->createMappingField($fieldName, $definition)) $ret[$fieldName] = $field;
      }

      else throw new \InvalidStateException('Field is not simple field not mapping either');

      // Count field visible by default
      if($field && $field->show === true) $cntVisible++;
    }

    // No cols have show parameter -> try to guess
    if(!$cntVisible) {
      foreach(array_keys($ret) as $i => $name) $ret[$name]->show = ($i != 0 && $i < 8) ? 1 : 0;
    }
    
    return $ret;
  }

  /**
   * Creates definition of simple field
   *
   * @param string $fieldName
   * @param array $definition
   * @return Field
   */
  private function createSimpleField($fieldName, array $definition) {
    $title = $this->aeMetadata->getFieldMetadata($fieldName, 'Title') ?: ucfirst($fieldName);

    $field = new Field($fieldName, array(
      'title'     => $title,
      'variable'  => $fieldName,
      'show'      => $show = !empty($definition['showByDefault']),
    ));

    switch($type = $definition['type']) {
      case 'datetime':
      case 'date':
        $field->helper = 'date';
        break;
    }

    // Common initialization
    $this->_setupTableField($field);

    return $field;
  }

  /**
   * Create definition of mapping field
   *
   * @param string $fieldName
   * @param array $definition
   * @return Field
   */
  private function createMappingField($fieldName, array $definition) {
    $title = $this->aeMetadata->getFieldMetadata($fieldName, 'Title') ?: ucfirst($fieldName);

    // Get index field of the other entity
    $indexField = reset($definition['sourceToTargetKeyColumns']);

    $field = new Field($fieldName, array(
      'title'     => $title,
      'show'      => true,
      'content'   => "{= \\ActiveEntity\\Helper::DoctrineProxyIdentifier(\$item->$fieldName, '$indexField')}",
    ));

    // Common initialization
    $this->_setupTableField($field);

    return $field;
  }

  /**
   * Common initialization for a table field
   */
  private function _setupTableField(Field $field) {
    // Get ActiveEntity metadata for this field
    $md = $this->aeMetadata->getFieldMetadata($field->name);
    
    if(isset($md['show'])) $field->parameters['show'] = $md['show'];
    if(isset($md['link'])) $field->parameters['link'] = array_merge(@$this->aeMetadata->classAnnotations['links'] ?: array(), $md['link']);
  }

  /**
   * Get variable which is primary key
   * @return string
   */
  public function getFieldIndex() {
    $keys = $this->classMetadata->getAllFieldNames();
    return $keys[0];
  }
  
  /**
   * Get default sort column
   */
  public function getSortFields() {
    return array(
      array($this->getFieldIndex(), \Juz\Tables\ISortable::ORDER_ASCENDING)
    );
  }
  
  /**
   * Get last change of template definition (for cache invalidation)
   * @return int timesamp
   */
  public function getMTime() {
    return 0;
  }

  /**
   * Get list of links which should be shown in header
   * @return array [ { title, module, presenter, view?, action?, params[] } ]
   */
  public function getHeaderLinks() {
    return $this->aeMetadata->getHeaderLinks();
  }

  public function getItemLinks() {
    return $this->aeMetadata->getItemLinks();
  }

  /**
   * Get definition of data source
   * @param string $name
   * @return IDataSourceDefinition
   */
  function getDataSourceDefinition($name = null) {
    $def = new \Juz\Tables\DataSourceDefinition('doctrine-entity', array(
      'entityName' => $this->entityName,
    ));

    // Add parameters
    foreach($this->aeMetadata->getRequiredFields() as $fieldName) {
      $def->addParameter($fieldName, array('required' => true));
    }

    return $def;
  }
}
