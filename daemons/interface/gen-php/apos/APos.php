<?php
namespace Thrift\APos;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/apos/apos_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/services/Services.php';

interface APosIf extends \Thrift\APos\ServicesIf {
  public function testConnection();
  public function getSysName();
  public function getUptime();
  public function getSysInfo();
  public function getMacList($vlan, $ifName);
  public function getArpList($vlan, $ifName);
  public function getVlanList();
  public function getVlanPortList();
  public function getRouteList($allowDynamic);
  public function getIPList();
  public function getInterfaceList();
  public function getPortList();
  public function getRegistrationTable();
  public function execute($cmd);
  public function executeList($cmdList);
}

class APosClient extends \Thrift\APos\ServicesClient implements \Thrift\APos\APosIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function testConnection()
  {
    $this->send_testConnection();
    return $this->recv_testConnection();
  }

  public function send_testConnection()
  {
    $args = new \Thrift\APos\APos_testConnection_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'testConnection', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('testConnection', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_testConnection()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_testConnection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_testConnection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("testConnection failed: unknown result");
  }

  public function getSysName()
  {
    $this->send_getSysName();
    return $this->recv_getSysName();
  }

  public function send_getSysName()
  {
    $args = new \Thrift\APos\APos_getSysName_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSysName', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSysName', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSysName()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getSysName_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getSysName_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSysName failed: unknown result");
  }

  public function getUptime()
  {
    $this->send_getUptime();
    return $this->recv_getUptime();
  }

  public function send_getUptime()
  {
    $args = new \Thrift\APos\APos_getUptime_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUptime', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUptime', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUptime()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getUptime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getUptime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUptime failed: unknown result");
  }

  public function getSysInfo()
  {
    $this->send_getSysInfo();
    return $this->recv_getSysInfo();
  }

  public function send_getSysInfo()
  {
    $args = new \Thrift\APos\APos_getSysInfo_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSysInfo', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSysInfo', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSysInfo()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getSysInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getSysInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSysInfo failed: unknown result");
  }

  public function getMacList($vlan, $ifName)
  {
    $this->send_getMacList($vlan, $ifName);
    return $this->recv_getMacList();
  }

  public function send_getMacList($vlan, $ifName)
  {
    $args = new \Thrift\APos\APos_getMacList_args();
    $args->vlan = $vlan;
    $args->ifName = $ifName;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMacList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMacList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMacList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getMacList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getMacList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getMacList failed: unknown result");
  }

  public function getArpList($vlan, $ifName)
  {
    $this->send_getArpList($vlan, $ifName);
    return $this->recv_getArpList();
  }

  public function send_getArpList($vlan, $ifName)
  {
    $args = new \Thrift\APos\APos_getArpList_args();
    $args->vlan = $vlan;
    $args->ifName = $ifName;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getArpList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getArpList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getArpList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getArpList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getArpList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getArpList failed: unknown result");
  }

  public function getVlanList()
  {
    $this->send_getVlanList();
    return $this->recv_getVlanList();
  }

  public function send_getVlanList()
  {
    $args = new \Thrift\APos\APos_getVlanList_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVlanList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVlanList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVlanList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getVlanList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getVlanList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVlanList failed: unknown result");
  }

  public function getVlanPortList()
  {
    $this->send_getVlanPortList();
    return $this->recv_getVlanPortList();
  }

  public function send_getVlanPortList()
  {
    $args = new \Thrift\APos\APos_getVlanPortList_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVlanPortList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVlanPortList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVlanPortList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getVlanPortList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getVlanPortList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVlanPortList failed: unknown result");
  }

  public function getRouteList($allowDynamic)
  {
    $this->send_getRouteList($allowDynamic);
    return $this->recv_getRouteList();
  }

  public function send_getRouteList($allowDynamic)
  {
    $args = new \Thrift\APos\APos_getRouteList_args();
    $args->allowDynamic = $allowDynamic;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRouteList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRouteList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRouteList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getRouteList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getRouteList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRouteList failed: unknown result");
  }

  public function getIPList()
  {
    $this->send_getIPList();
    return $this->recv_getIPList();
  }

  public function send_getIPList()
  {
    $args = new \Thrift\APos\APos_getIPList_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getIPList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getIPList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getIPList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getIPList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getIPList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getIPList failed: unknown result");
  }

  public function getInterfaceList()
  {
    $this->send_getInterfaceList();
    return $this->recv_getInterfaceList();
  }

  public function send_getInterfaceList()
  {
    $args = new \Thrift\APos\APos_getInterfaceList_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInterfaceList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInterfaceList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInterfaceList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getInterfaceList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getInterfaceList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getInterfaceList failed: unknown result");
  }

  public function getPortList()
  {
    $this->send_getPortList();
    return $this->recv_getPortList();
  }

  public function send_getPortList()
  {
    $args = new \Thrift\APos\APos_getPortList_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPortList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPortList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPortList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getPortList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getPortList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPortList failed: unknown result");
  }

  public function getRegistrationTable()
  {
    $this->send_getRegistrationTable();
    return $this->recv_getRegistrationTable();
  }

  public function send_getRegistrationTable()
  {
    $args = new \Thrift\APos\APos_getRegistrationTable_args();
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRegistrationTable', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRegistrationTable', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRegistrationTable()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_getRegistrationTable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_getRegistrationTable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRegistrationTable failed: unknown result");
  }

  public function execute($cmd)
  {
    $this->send_execute($cmd);
    return $this->recv_execute();
  }

  public function send_execute($cmd)
  {
    $args = new \Thrift\APos\APos_execute_args();
    $args->cmd = $cmd;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'execute', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('execute', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_execute()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_execute_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_execute_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("execute failed: unknown result");
  }

  public function executeList($cmdList)
  {
    $this->send_executeList($cmdList);
    return $this->recv_executeList();
  }

  public function send_executeList($cmdList)
  {
    $args = new \Thrift\APos\APos_executeList_args();
    $args->cmdList = $cmdList;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeList', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeList', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeList()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\APos_executeList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\APos_executeList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("executeList failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class APos_testConnection_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_testConnection_args';
  }

  public function read($input)
  {
    return $this->_read('APos_testConnection_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_testConnection_args', self::$_TSPEC, $output);
  }
}

class APos_testConnection_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_testConnection_result';
  }

  public function read($input)
  {
    return $this->_read('APos_testConnection_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_testConnection_result', self::$_TSPEC, $output);
  }
}

class APos_getSysName_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getSysName_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getSysName_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getSysName_args', self::$_TSPEC, $output);
  }
}

class APos_getSysName_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getSysName_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getSysName_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getSysName_result', self::$_TSPEC, $output);
  }
}

class APos_getUptime_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getUptime_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getUptime_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getUptime_args', self::$_TSPEC, $output);
  }
}

class APos_getUptime_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => 'i32',
          'type' => \TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getUptime_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getUptime_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getUptime_result', self::$_TSPEC, $output);
  }
}

class APos_getSysInfo_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getSysInfo_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getSysInfo_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getSysInfo_args', self::$_TSPEC, $output);
  }
}

class APos_getSysInfo_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '\Thrift\APos\OSInfo',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\APos\OSInfo',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getSysInfo_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getSysInfo_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getSysInfo_result', self::$_TSPEC, $output);
  }
}

class APos_getMacList_args extends \TBase {
  static $_TSPEC;

  public $vlan = null;
  public $ifName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vlan',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        2 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getMacList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getMacList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getMacList_args', self::$_TSPEC, $output);
  }
}

class APos_getMacList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\MacAddressEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\MacAddressEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getMacList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getMacList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getMacList_result', self::$_TSPEC, $output);
  }
}

class APos_getArpList_args extends \TBase {
  static $_TSPEC;

  public $vlan = null;
  public $ifName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vlan',
          'name' => 'i16',
          'type' => \TType::I16,
          ),
        2 => array(
          'var' => 'ifName',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getArpList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getArpList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getArpList_args', self::$_TSPEC, $output);
  }
}

class APos_getArpList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\ArpEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\ArpEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getArpList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getArpList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getArpList_result', self::$_TSPEC, $output);
  }
}

class APos_getVlanList_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getVlanList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getVlanList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getVlanList_args', self::$_TSPEC, $output);
  }
}

class APos_getVlanList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\VlanEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\VlanEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getVlanList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getVlanList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getVlanList_result', self::$_TSPEC, $output);
  }
}

class APos_getVlanPortList_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getVlanPortList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getVlanPortList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getVlanPortList_args', self::$_TSPEC, $output);
  }
}

class APos_getVlanPortList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '\Thrift\APos\VlanPortEntry',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\APos\VlanPortEntry',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getVlanPortList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getVlanPortList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getVlanPortList_result', self::$_TSPEC, $output);
  }
}

class APos_getRouteList_args extends \TBase {
  static $_TSPEC;

  public $allowDynamic = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'allowDynamic',
          'name' => 'bool',
          'type' => \TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getRouteList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getRouteList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getRouteList_args', self::$_TSPEC, $output);
  }
}

class APos_getRouteList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\RouteEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\RouteEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getRouteList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getRouteList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getRouteList_result', self::$_TSPEC, $output);
  }
}

class APos_getIPList_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getIPList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getIPList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getIPList_args', self::$_TSPEC, $output);
  }
}

class APos_getIPList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\IpAddressEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\IpAddressEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getIPList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getIPList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getIPList_result', self::$_TSPEC, $output);
  }
}

class APos_getInterfaceList_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getInterfaceList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getInterfaceList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getInterfaceList_args', self::$_TSPEC, $output);
  }
}

class APos_getInterfaceList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\NetInterfaceEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\NetInterfaceEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getInterfaceList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getInterfaceList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getInterfaceList_result', self::$_TSPEC, $output);
  }
}

class APos_getPortList_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getPortList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getPortList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getPortList_args', self::$_TSPEC, $output);
  }
}

class APos_getPortList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\PortEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\PortEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getPortList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getPortList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getPortList_result', self::$_TSPEC, $output);
  }
}

class APos_getRegistrationTable_args extends \TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'APos_getRegistrationTable_args';
  }

  public function read($input)
  {
    return $this->_read('APos_getRegistrationTable_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getRegistrationTable_args', self::$_TSPEC, $output);
  }
}

class APos_getRegistrationTable_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRUCT,
          'elem' => array(
            'name' => '\Thrift\APos\RegistrationTableEntry',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\RegistrationTableEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_getRegistrationTable_result';
  }

  public function read($input)
  {
    return $this->_read('APos_getRegistrationTable_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_getRegistrationTable_result', self::$_TSPEC, $output);
  }
}

class APos_execute_args extends \TBase {
  static $_TSPEC;

  public $cmd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmd',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_execute_args';
  }

  public function read($input)
  {
    return $this->_read('APos_execute_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_execute_args', self::$_TSPEC, $output);
  }
}

class APos_execute_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_execute_result';
  }

  public function read($input)
  {
    return $this->_read('APos_execute_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_execute_result', self::$_TSPEC, $output);
  }
}

class APos_executeList_args extends \TBase {
  static $_TSPEC;

  public $cmdList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmdList',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRING,
          'elem' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_executeList_args';
  }

  public function read($input)
  {
    return $this->_read('APos_executeList_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_executeList_args', self::$_TSPEC, $output);
  }
}

class APos_executeList_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::STRING,
          'elem' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'APos_executeList_result';
  }

  public function read($input)
  {
    return $this->_read('APos_executeList_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('APos_executeList_result', self::$_TSPEC, $output);
  }
}

class APosProcessor extends \Thrift\APos\ServicesProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(\TType::STRUCT);
      $input->readMessageEnd();
      $x = new \TApplicationException('Function '.$fname.' not implemented.', \TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, \TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_testConnection($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_testConnection_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_testConnection_result();
    $result->success = $this->handler_->testConnection();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'testConnection', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('testConnection', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getSysName($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getSysName_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getSysName_result();
    $result->success = $this->handler_->getSysName();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSysName', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSysName', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getUptime($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getUptime_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getUptime_result();
    $result->success = $this->handler_->getUptime();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getUptime', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getUptime', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getSysInfo($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getSysInfo_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getSysInfo_result();
    $result->success = $this->handler_->getSysInfo();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSysInfo', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSysInfo', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getMacList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getMacList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getMacList_result();
    $result->success = $this->handler_->getMacList($args->vlan, $args->ifName);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getMacList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getMacList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getArpList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getArpList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getArpList_result();
    $result->success = $this->handler_->getArpList($args->vlan, $args->ifName);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getArpList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getArpList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getVlanList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getVlanList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getVlanList_result();
    $result->success = $this->handler_->getVlanList();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getVlanList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getVlanList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getVlanPortList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getVlanPortList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getVlanPortList_result();
    $result->success = $this->handler_->getVlanPortList();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getVlanPortList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getVlanPortList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getRouteList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getRouteList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getRouteList_result();
    $result->success = $this->handler_->getRouteList($args->allowDynamic);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getRouteList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getRouteList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getIPList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getIPList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getIPList_result();
    $result->success = $this->handler_->getIPList();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getIPList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getIPList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getInterfaceList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getInterfaceList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getInterfaceList_result();
    $result->success = $this->handler_->getInterfaceList();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getInterfaceList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getInterfaceList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getPortList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getPortList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getPortList_result();
    $result->success = $this->handler_->getPortList();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPortList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPortList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getRegistrationTable($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_getRegistrationTable_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_getRegistrationTable_result();
    $result->success = $this->handler_->getRegistrationTable();
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getRegistrationTable', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getRegistrationTable', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_execute($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_execute_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_execute_result();
    $result->success = $this->handler_->execute($args->cmd);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'execute', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('execute', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_executeList($seqid, $input, $output) {
    $args = new \Thrift\APos\APos_executeList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\APos_executeList_result();
    $result->success = $this->handler_->executeList($args->cmdList);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'executeList', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('executeList', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
}
?>
