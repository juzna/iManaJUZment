<?php
namespace Thrift\APos;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/apos_mikrotik/apos_mikrotik_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/apos/APos.php';

interface MkIf extends \Thrift\APos\APosIf {
  public function export($path);
  public function getAll($path);
  public function executeAPI($path, $command, $params);
  public function executeAPIMulti($cmdList);
}

class MkClient extends \Thrift\APos\APosClient implements \Thrift\APos\MkIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function export($path)
  {
    $this->send_export($path);
    return $this->recv_export();
  }

  public function send_export($path)
  {
    $args = new \Thrift\APos\Mk_export_args();
    $args->path = $path;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'export', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('export', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_export()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\Mk_export_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\Mk_export_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("export failed: unknown result");
  }

  public function getAll($path)
  {
    $this->send_getAll($path);
    return $this->recv_getAll();
  }

  public function send_getAll($path)
  {
    $args = new \Thrift\APos\Mk_getAll_args();
    $args->path = $path;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAll', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAll', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAll()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\Mk_getAll_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\Mk_getAll_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAll failed: unknown result");
  }

  public function executeAPI($path, $command, $params)
  {
    $this->send_executeAPI($path, $command, $params);
    return $this->recv_executeAPI();
  }

  public function send_executeAPI($path, $command, $params)
  {
    $args = new \Thrift\APos\Mk_executeAPI_args();
    $args->path = $path;
    $args->command = $command;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeAPI', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeAPI', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeAPI()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\Mk_executeAPI_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\Mk_executeAPI_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("executeAPI failed: unknown result");
  }

  public function executeAPIMulti($cmdList)
  {
    $this->send_executeAPIMulti($cmdList);
    return $this->recv_executeAPIMulti();
  }

  public function send_executeAPIMulti($cmdList)
  {
    $args = new \Thrift\APos\Mk_executeAPIMulti_args();
    $args->cmdList = $cmdList;
    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeAPIMulti', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeAPIMulti', \TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeAPIMulti()
  {
    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\APos\Mk_executeAPIMulti_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == \TMessageType::EXCEPTION) {
        $x = new \TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\APos\Mk_executeAPIMulti_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("executeAPIMulti failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Mk_export_args extends \TBase {
  static $_TSPEC;

  public $path = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_export_args';
  }

  public function read($input)
  {
    return $this->_read('Mk_export_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_export_args', self::$_TSPEC, $output);
  }
}

class Mk_export_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::MAP,
          'elem' => array(
            'name' => '',
            'type' => \TType::MAP,
            'ktype' => \TType::STRING,
            'vtype' => \TType::STRING,
            'key' => array(
              'name' => 'string',
              'type' => \TType::STRING,
            ),
            'val' => array(
              'name' => 'string',
              'type' => \TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_export_result';
  }

  public function read($input)
  {
    return $this->_read('Mk_export_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_export_result', self::$_TSPEC, $output);
  }
}

class Mk_getAll_args extends \TBase {
  static $_TSPEC;

  public $path = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_getAll_args';
  }

  public function read($input)
  {
    return $this->_read('Mk_getAll_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_getAll_args', self::$_TSPEC, $output);
  }
}

class Mk_getAll_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::LST,
          'etype' => \TType::MAP,
          'elem' => array(
            'name' => '',
            'type' => \TType::MAP,
            'ktype' => \TType::STRING,
            'vtype' => \TType::STRING,
            'key' => array(
              'name' => 'string',
              'type' => \TType::STRING,
            ),
            'val' => array(
              'name' => 'string',
              'type' => \TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_getAll_result';
  }

  public function read($input)
  {
    return $this->_read('Mk_getAll_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_getAll_result', self::$_TSPEC, $output);
  }
}

class Mk_executeAPI_args extends \TBase {
  static $_TSPEC;

  public $path = null;
  public $command = null;
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        2 => array(
          'var' => 'command',
          'name' => 'string',
          'type' => \TType::STRING,
          ),
        3 => array(
          'var' => 'params',
          'name' => '',
          'type' => \TType::MAP,
          'ktype' => \TType::STRING,
          'vtype' => \TType::STRING,
          'key' => array(
            'name' => 'string',
            'type' => \TType::STRING,
          ),
          'val' => array(
            'name' => 'string',
            'type' => \TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_executeAPI_args';
  }

  public function read($input)
  {
    return $this->_read('Mk_executeAPI_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_executeAPI_args', self::$_TSPEC, $output);
  }
}

class Mk_executeAPI_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '\Thrift\APos\APIResult',
          'type' => \TType::STRUCT,
          'class' => '\Thrift\APos\APIResult',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_executeAPI_result';
  }

  public function read($input)
  {
    return $this->_read('Mk_executeAPI_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_executeAPI_result', self::$_TSPEC, $output);
  }
}

class Mk_executeAPIMulti_args extends \TBase {
  static $_TSPEC;

  public $cmdList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmdList',
          'name' => '',
          'type' => \TType::MAP,
          'ktype' => \TType::STRING,
          'vtype' => \TType::STRUCT,
          'key' => array(
            'name' => 'string',
            'type' => \TType::STRING,
          ),
          'val' => array(
            'name' => '\Thrift\APos\APICommand',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\APICommand',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_executeAPIMulti_args';
  }

  public function read($input)
  {
    return $this->_read('Mk_executeAPIMulti_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_executeAPIMulti_args', self::$_TSPEC, $output);
  }
}

class Mk_executeAPIMulti_result extends \TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'name' => '',
          'type' => \TType::MAP,
          'ktype' => \TType::STRING,
          'vtype' => \TType::STRUCT,
          'key' => array(
            'name' => 'string',
            'type' => \TType::STRING,
          ),
          'val' => array(
            'name' => '\Thrift\APos\APIResult',
            'type' => \TType::STRUCT,
            'class' => '\Thrift\APos\APIResult',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mk_executeAPIMulti_result';
  }

  public function read($input)
  {
    return $this->_read('Mk_executeAPIMulti_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mk_executeAPIMulti_result', self::$_TSPEC, $output);
  }
}

class MkProcessor extends \Thrift\APos\APosProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(\TType::STRUCT);
      $input->readMessageEnd();
      $x = new \TApplicationException('Function '.$fname.' not implemented.', \TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, \TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_export($seqid, $input, $output) {
    $args = new \Thrift\APos\Mk_export_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\Mk_export_result();
    $result->success = $this->handler_->export($args->path);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'export', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('export', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_getAll($seqid, $input, $output) {
    $args = new \Thrift\APos\Mk_getAll_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\Mk_getAll_result();
    $result->success = $this->handler_->getAll($args->path);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getAll', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getAll', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_executeAPI($seqid, $input, $output) {
    $args = new \Thrift\APos\Mk_executeAPI_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\Mk_executeAPI_result();
    $result->success = $this->handler_->executeAPI($args->path, $args->command, $args->params);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'executeAPI', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('executeAPI', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
  protected function process_executeAPIMulti($seqid, $input, $output) {
    $args = new \Thrift\APos\Mk_executeAPIMulti_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Thrift\APos\Mk_executeAPIMulti_result();
    $result->success = $this->handler_->executeAPIMulti($args->cmdList);
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'executeAPIMulti', \TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('executeAPIMulti', \TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
    }
  }
}
?>
