//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.LiveConnectOp = { 
'opAdd' : 1
,'opEdit' : 2
,'opRemove' : 3
,'opClone' : 4
,'all' : 255
}
ttypes.LiveConnectConditionOp = { 
'present' : 1
,'eq' : 2
,'lt' : 3
,'lte' : 4
,'gt' : 5
,'gte' : 6
}
var Condition = module.exports.Condition = function(args){
  this.column = null
  this.operation = null
  this.value = null
if( args != null ){  if (null != args.column)
  this.column = args.column
  if (null != args.operation)
  this.operation = args.operation
  if (null != args.value)
  this.value = args.value
}}
Condition.prototype = {}
Condition.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.operation = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Condition.prototype.write = function(output){ 
  output.writeStructBegin('Condition')
  if (null != this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 1)
    output.writeString(this.column)
    output.writeFieldEnd()
  }
  if (null != this.operation) {
    output.writeFieldBegin('operation', Thrift.Type.I32, 2)
    output.writeI32(this.operation)
    output.writeFieldEnd()
  }
  if (null != this.value) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3)
    output.writeString(this.value)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var EventDefinition = module.exports.EventDefinition = function(args){
  this.table = null
  this.operations = null
  this.columns = null
  this.conditions = null
if( args != null ){  if (null != args.table)
  this.table = args.table
  if (null != args.operations)
  this.operations = args.operations
  if (null != args.columns)
  this.columns = args.columns
  if (null != args.conditions)
  this.conditions = args.conditions
}}
EventDefinition.prototype = {}
EventDefinition.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.SET) {
        {
          var _size0 = 0
          var rtmp3
          this.operations = []
          var _etype3 = 0
          rtmp3 = input.readSetBegin()
          _etype3= rtmp3.etype
          _size0 = rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            var elem5 = null
            elem5 = input.readI32()
            this.operations.push(elem5)
          }
          input.readSetEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.SET) {
        {
          var _size6 = 0
          var rtmp3
          this.columns = []
          var _etype9 = 0
          rtmp3 = input.readSetBegin()
          _etype9= rtmp3.etype
          _size6 = rtmp3.size
          for (var _i10 = 0; _i10 < _size6; ++_i10)
          {
            var elem11 = null
            elem11 = input.readString()
            this.columns.push(elem11)
          }
          input.readSetEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.SET) {
        {
          var _size12 = 0
          var rtmp3
          this.conditions = []
          var _etype15 = 0
          rtmp3 = input.readSetBegin()
          _etype15= rtmp3.etype
          _size12 = rtmp3.size
          for (var _i16 = 0; _i16 < _size12; ++_i16)
          {
            var elem17 = null
            elem17 = new ttypes.Condition()
            elem17.read(input)
            this.conditions.push(elem17)
          }
          input.readSetEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

EventDefinition.prototype.write = function(output){ 
  output.writeStructBegin('EventDefinition')
  if (null != this.table) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1)
    output.writeString(this.table)
    output.writeFieldEnd()
  }
  if (null != this.operations) {
    output.writeFieldBegin('operations', Thrift.Type.SET, 2)
    {
      output.writeSetBegin(Thrift.Type.I32, this.operations.length)
      {
        for(var iter18 in this.operations)
        {
          if (this.operations.hasOwnProperty(iter18))
          {
            iter18=this.operations[iter18]
            output.writeI32(iter18)
          }
        }
      }
      output.writeSetEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.SET, 3)
    {
      output.writeSetBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter19 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter19))
          {
            iter19=this.columns[iter19]
            output.writeString(iter19)
          }
        }
      }
      output.writeSetEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.conditions) {
    output.writeFieldBegin('conditions', Thrift.Type.SET, 4)
    {
      output.writeSetBegin(Thrift.Type.STRUCT, this.conditions.length)
      {
        for(var iter20 in this.conditions)
        {
          if (this.conditions.hasOwnProperty(iter20))
          {
            iter20=this.conditions[iter20]
            iter20.write(output)
          }
        }
      }
      output.writeSetEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Subscription = module.exports.Subscription = function(args){
  this.clientKey = null
  this.ev = null
  this.expiry = null
  this.renewals = null
  this.eventReceived = null
if( args != null ){  if (null != args.clientKey)
  this.clientKey = args.clientKey
  if (null != args.ev)
  this.ev = args.ev
  if (null != args.expiry)
  this.expiry = args.expiry
  if (null != args.renewals)
  this.renewals = args.renewals
  if (null != args.eventReceived)
  this.eventReceived = args.eventReceived
}}
Subscription.prototype = {}
Subscription.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.clientKey = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ev = new ttypes.EventDefinition()
        this.ev.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.expiry = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.renewals = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.eventReceived = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Subscription.prototype.write = function(output){ 
  output.writeStructBegin('Subscription')
  if (null != this.clientKey) {
    output.writeFieldBegin('clientKey', Thrift.Type.STRING, 1)
    output.writeString(this.clientKey)
    output.writeFieldEnd()
  }
  if (null != this.ev) {
    output.writeFieldBegin('ev', Thrift.Type.STRUCT, 2)
    this.ev.write(output)
    output.writeFieldEnd()
  }
  if (null != this.expiry) {
    output.writeFieldBegin('expiry', Thrift.Type.I32, 3)
    output.writeI32(this.expiry)
    output.writeFieldEnd()
  }
  if (null != this.renewals) {
    output.writeFieldBegin('renewals', Thrift.Type.I32, 4)
    output.writeI32(this.renewals)
    output.writeFieldEnd()
  }
  if (null != this.eventReceived) {
    output.writeFieldBegin('eventReceived', Thrift.Type.I32, 5)
    output.writeI32(this.eventReceived)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

